name: CI

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: enricher
          POSTGRES_PASSWORD: supersecret1
          POSTGRES_DB: sql_enrichment_test
          POSTGRES_PORT: 5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Prepare Mock server for SCE ApiRequestEnrichmentIntegrationTest (launch in background)
      run: python integration-tests/sce-api-lookup-test.py 8001 &
    - name: Prepare Mock server for BE ApiRequestEnrichmentIntegrationTest (launch in background)
      run: python integration-tests/beam-api-lookup-test.py &
    - name: Prepare Postgres for SCE SqlLookupEnrichmentIntegrationTest (create entities)
      run: psql -h localhost -p 5432 -U enricher -d sql_enrichment_test < integration-tests/sce-sql-enrichment-test.sql
      env:
        PGPASSWORD: supersecret1
    - name: Prepare Mock server for BE ApiRequestEnrichmentIntegrationTest (launch in background)
      run: python integration-tests/beam-api-lookup-test.py &
    - name: Prepare Postgres for BE SqlLookupEnrichmentIntegrationTest (create entities)
      run: psql -h localhost -p 5432 -U enricher -d sql_enrichment_test < integration-tests/beam-sql-enrichment-test.sql
      env:
        PGPASSWORD: supersecret1
    - name: Run tests
      run: sbt +test
      env:
        OER_KEY: ${{ secrets.OER_KEY }}
    - name: Check Scala formatting
      if: ${{ always() }}
      run: sbt scalafmtCheckAll
    - name: Check assets can be published
      if: ${{ always() }}
      run: sbt publishLocal

  github_release:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Get current version
      id: ver
      run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
    - name: Assemble fat jars
      run: |
        sbt "project kinesis; set assembly / test := {}; assembly" \
            "project kafka; set assembly / test := {}; assembly" \
            "project nsq; set assembly / test := {}; assembly" \
            "project beam; set assembly / test := {}; assembly" \
            "project pubsub; set assembly / test := {}; assembly"
    - name: Create GitHub release and attach artifacts
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: ${{ contains(steps.ver.outputs.tag, 'rc') }}
        name: ${{ steps.ver.outputs.tag }}
        tag_name: ${{ steps.ver.outputs.tag }}
        files: |
          modules/kinesis/target/scala-2.12/snowplow-stream-enrich-kinesis-${{ steps.ver.outputs.tag }}.jar
          modules/kafka/target/scala-2.12/snowplow-stream-enrich-kafka-${{ steps.ver.outputs.tag }}.jar
          modules/nsq/target/scala-2.12/snowplow-stream-enrich-nsq-${{ steps.ver.outputs.tag }}.jar
          modules/beam/target/scala-2.12/beam-enrich-${{ steps.ver.outputs.tag }}.jar
          modules/pubsub/target/scala-2.12/snowplow-enrich-pubsub-${{ steps.ver.outputs.tag }}.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_stream:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Docker login
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and publish Stream Kinesis Docker image
      run: sbt "project kinesis" docker:publish
    - name: Build and publish Stream Kafka Docker image
      if: ${{ always() }}
      run: sbt "project kafka" docker:publish
    - name: Build and publish Stream NSQ Docker image
      if: ${{ always() }}
      run: sbt "project nsq" docker:publish

  publish_pubsub:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Docker login
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and publish Enrich PubSub Docker image
      run: sbt "project pubsub" docker:publish

  publish_beam:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: enricher
          POSTGRES_PASSWORD: supersecret1
          POSTGRES_DB: sql_enrichment_test
          POSTGRES_PORT: 5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Docker login
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and publish Beam Docker images
      run: sbt "project beam" docker:publish

  publish_sce:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Deploy SCE on Maven Central
      run: sbt "project common" ci-release
      env:
        PGP_PASSPHRASE: ${{ secrets.SONA_PGP_PASSPHRASE }}
        PGP_SECRET: ${{ secrets.SONA_PGP_SECRET }}
        SONATYPE_USERNAME: ${{ secrets.SONA_USER }}
        SONATYPE_PASSWORD: ${{ secrets.SONA_PASS }}

  coverage:
    needs: test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: enricher
          POSTGRES_PASSWORD: supersecret1
          POSTGRES_DB: sql_enrichment_test
          POSTGRES_PORT: 5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Prepare Mock server for BE ApiRequestEnrichmentIntegrationTest (launch in background)
      run: python integration-tests/beam-api-lookup-test.py &
    - name: Prepare Postgres for BE SqlLookupEnrichmentIntegrationTest (create entities)
      run: psql -h localhost -p 5432 -U enricher -d sql_enrichment_test < integration-tests/beam-sql-enrichment-test.sql
      env:
        PGPASSWORD: supersecret1
    - name: Prepare Mock server for SCE ApiRequestEnrichmentIntegrationTest (launch in background)
      run: python integration-tests/sce-api-lookup-test.py 8001 &
    - name: Prepare Postgres for SCE SqlLookupEnrichmentIntegrationTest (create entities)
      run: psql -h localhost -p 5432 -U enricher -d sql_enrichment_test < integration-tests/sce-sql-enrichment-test.sql
      env:
        PGPASSWORD: supersecret1

    - name: Run tests
      run: sbt coverage +test coverageReport
      env:
        OER_KEY: ${{ secrets.OER_KEY }}
    - name: Aggregate coverage data
      if: ${{ always() }}
      run: sbt coverageAggregate
    - name: Submit coveralls data
      if: ${{ always() }}
      run: sbt coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
