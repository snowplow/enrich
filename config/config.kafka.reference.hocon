{
  # -- Full license text available in LICENSE.md
  "license" {
    "accept": true
  }

  "input": {
    # -- kafka topic name for the source of collector payloads
    "topicName": "snowplow-collector-payloads"

    # -- kafka bootstrap servers
    "bootstrapServers": "localhost:9092"

    # -- How frequently to commit our progress back to kafka. By increasing this value,
    # -- we decrease the number of requests made to the kafka broker
    debounceCommitOffsets: "10 seconds"

    # -- Any valid Kafka consumer config options
    consumerConf: {
      "group.id": "enrich-kafka"
      "enable.auto.commit": "false"
      "allow.auto.create.topics": "false"
      "auto.offset.reset": "earliest"
    }
  }

  "output": {

    "good": {
      # -- output kafka topic name for enriched events
      "topicName": "snowplow-enriched"

      # -- kafka bootstrap servers
      "bootstrapServers": "localhost:9092"

      # -- any valid Kafka producer config options
      "producerConf": {
        "client.id": "enrich-kafka"
      }

      # -- optional. Partition key for the enriched events in Kafka
      # If not set, a random UUID is used
      "partitionKey": "user_id"

      # -- optional. Enriched event fields to add as Kafka record headers.
      "attributes": [ "app_id" ]
    }

    "failed": {
      # -- output kafka topic name for failed events that could not be validated or enriched (TSV)
      "topicName": "snowplow-failed"

      # -- kafka bootstrap servers
      "bootstrapServers": "localhost:9092"

      # -- any valid Kafka producer config options
      "producerConf": {
        "client.id": "enrich-kafka"
      }
    }

    "bad": {
      # -- output kafka topic name for bad rows (JSON)
      "topicName": "snowplow-bad"

      # -- kafka bootstrap servers
      "bootstrapServers": "localhost:9092"

      # -- any valid Kafka producer config options
      "producerConf": {
        "client.id": "enrich-kafka"
      }
    }

  }

  # -- Controls how the app splits the workload into concurrent batches which can be run in parallel
  # -- E.g. If there are 4 available processors, and cpuParallelismFactor = 0.75, then we process 3 batches concurrently.
  # -- Adjusting this value can cause the app to use more or less of the available CPU.
  # -- Steps with parallelism: validating and enriching
  "cpuParallelismFraction": 1

  # -- Controls number of sink job that can be run in parallel
  # -- E.g. If there are 4 available processors, and sinkParallelismFraction = 2, then we run 8 sink job concurrently.
  # -- Adjusting this value can cause the app to use more or less of the available CPU.
  "sinkParallelismFraction": 2

  "monitoring": {

    "metrics": {
      # -- Send runtime metrics to a statsd server
      "statsd": {
        "hostname": "127.0.0.1"
        "port": 8125

        # -- Map of key/value pairs to be send along with the metric
        "tags": {
          "env": "prod"
        }

        # -- How often to report metrics
        "period": "1 minute"

        # -- Prefix used for the metric name when sending to statsd
        "prefix": "snowplow.enrich"
      }
    }

    # -- Report unexpected runtime exceptions to Sentry
    "sentry": {
      "dsn": "https://public@sentry.example.com/1"

      # -- Map of key/value pairs to be included as tags
      "tags": {
        "myTag": "xyz"
      }
    }

    # -- Open a HTTP server that returns OK only if the app is healthy
    "healthProbe": {
      "port": 8000

      # -- Health probe becomes unhealthy if any received event is still not fully processed before
      # -- this cutoff time
      "unhealthyLatency": "2 minutes"
    }
  }

  # -- Period after which enrich assets should be checked for updates
  "assetsUpdatePeriod": "7 days"

  # -- Configuration of internal http client used for iglu resolver, alerts, telemetry and metadata
  "http": {
    "client": {
      "maxConnectionsPerServer": 4
    }
  }

  "validation" : {

    # -- When set to true, events with fields too long still get emitted as valid enriched events
    # -- WARNING: this feature flag will be removed in a future version
    "acceptInvalid": false

    # -- Override default maximum atomic fields (strings) length
    # -- Map-like structure with keys being field names and values being their max allowed length
    "atomicFieldsLimits": {
        "app_id": 5
        "mkt_clickid": 100000
        # ...and any other 'atomic' field with custom limit
    }

    # -- Maximum allowed depth for the JSON entities in the events. The default value is 40
    # -- Event will be sent to bad row stream if it contains JSON entity with a depth that exceeds this value
    "maxJsonDepth": 50

    # -- Default is true.
    # -- If it is set to true, Enrich will exit with error if JS enrichment
    # -- script is invalid.
    # -- If it is set to false, Enrich will continue to run if JS enrichment
    # -- script is invalid but every event will end up as bad row.
    "exitOnJsCompileError": true
  }

  # -- Optional. Configure telemetry
  "telemetry": {

    # -- Set to true to disable telemetry
    "disable": false

    # -- Interval for the heartbeat event
    "interval": 15 minutes

    # -- URI of the collector receiving the heartbeat event
    "collectorUri": "https://collector-g.snowplowanalytics.com"

    # -- Identifier intended to tie events together across modules,
    # -- infrastructure and apps when used consistently
    "userProvidedId": my_pipeline

    # -- ID automatically generated upon running a modules deployment script
    # -- Intended to identify each independent module, and the infrastructure it controls
    "autoGeneratedId": hfy67e5ydhtrd

    # -- Unique identifier for the VM instance
    # -- Unique for each instance of the app running within a module
    "instanceId": 665bhft5u6udjf

    # -- Name of the terraform module that deployed the app
    "moduleName": enrich-kinesis-ce

    # -- Version of the terraform module that deployed the app
    "moduleVersion": 1.0.0
  }

  # -- Optional. Whether to export metadata using a webhook URL
  # -- Follows iglu-webhook protocol
  "metadata": {
    "endpoint": "https://my_pipeline.my_domain.com/iglu"
    "interval": 5 minutes
    "organizationId": "c5f3a09f-75f8-4309-bec5-fea560f78455"
    "pipelineId": "75a13583-5c99-40e3-81fc-541084dfc784"

    # -- Maximum body size for the payloads sent to the endpoint
    "maxBodySize": 150000
  }

  # -- Enrich events via an external identity service
  "identity": {
    "endpoint": "http://identity-api"
    "concurrency": 10
    "username": "snowplow"
    "password": "sn0wp10w"

    # -- Configures how HTTP requests are retried in case of failure
    "retries": {
      # -- Backoff delay for follow-up attempts
      "delay": "100 millis"
      # -- Max number of attempts, after which Enrich will crash and exit
      "attempts": 3
    }
  }

  # -- Configuration for Azure blob storage client configuration
  # -- used to download enrichment resources
  "blobClients": {
    "accounts": [
      # -- Example public account with no auth
      { "name": "storageAccount1"},

      # -- Example private account using default auth chain -> https://learn.microsoft.com/en-us/java/api/com.azure.identity.defaultazurecredential?view=azure-java-stable
      { "name": "storageAccount2", "auth": { "type": "default"} },

      # -- Example private account using SAS token auth
      { "name": "storageAccount3",  "auth": { "type": "sas", "value": "tokenValue"}}
    ]
  }
}
