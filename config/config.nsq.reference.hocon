{
  # -- Full license text available in LICENSE.md
  "license" {
    "accept": true
  }

  "input": {
    # -- Name of the NSQ topic with the collector payloads
    "topic": "collector-payloads"

    # -- Name of the NSQ channel used to retrieve collector payloads
    "channel": "collector-payloads-channel"

    # -- The host name of NSQ lookup application
    "lookupHost": "127.0.0.1"

    # -- The port number of NSQ lookup application
    "lookupPort": 4161

    # -- Optional. Maximum size of the buffer queue used between NSQ Java and FS2
    "maxBufferQueueSize": 3000
  }

  "output": {

    "good": {
      # -- Name of the NSQ topic that will receive enriched events
      "topic": "enriched"

      # -- The host name of nsqd application
      "nsqdHost": "127.0.0.1"

      # -- The port number of nsqd application
      "nsqdPort": 4150

      # -- Maximum number of bytes in a batch of records sent to NSQ
      "byteLimit": 5000000

      # -- Retry policy in case writing to NSQ fails
      "backoffPolicy": {
        "minBackoff": 100 milliseconds
        "maxBackoff": 10 seconds
        "maxRetries": 10
      }
    }

    "failed": {
      # -- Name of the NSQ topic that will receive failed events
      "topic": "failed"

      # -- The host name of nsqd application
      "nsqdHost": "127.0.0.1"

      # -- The port number of nsqd application
      "nsqdPort": 4150

      # -- Maximum number of bytes in a batch of records sent to NSQ
      "byteLimit": 5000000

      # -- Retry policy in case writing to NSQ fails
      "backoffPolicy": {
        "minBackoff": 100 milliseconds
        "maxBackoff": 10 seconds
        "maxRetries": 10
      }
    }

    "bad": {
      # -- Name of the NSQ topic that will receive bad rows
      "topic": "bad"

      # -- The host name of nsqd application
      "nsqdHost": "127.0.0.1"

      # -- The port number of nsqd application
      "nsqdPort": 4150

      # -- Maximum number of bytes in a batch of records sent to NSQ
      "byteLimit": 5000000

      # -- Retry policy in case writing to NSQ fails
      "backoffPolicy": {
        "minBackoff": 100 milliseconds
        "maxBackoff": 10 seconds
        "maxRetries": 10
      }
    }
  }

  # -- Controls how the app splits the workload into concurrent batches which can be run in parallel
  # -- E.g. If there are 4 available processors, and cpuParallelismFactor = 0.75, then we process 3 batches concurrently.
  # -- Adjusting this value can cause the app to use more or less of the available CPU.
  # -- Steps with parallelism: validating and enriching
  "cpuParallelismFraction": 1

  # -- Controls number of sink job that can be run in parallel
  # -- E.g. If there are 4 available processors, and sinkParallelismFraction = 2, then we run 8 sink job concurrently.
  # -- Adjusting this value can cause the app to use more or less of the available CPU.
  "sinkParallelismFraction": 2

  "monitoring": {

    "metrics": {
      # -- Send runtime metrics to a statsd server
      "statsd": {
        "hostname": "127.0.0.1"
        "port": 8125

        # -- Map of key/value pairs to be send along with the metric
        "tags": {
          "env": "prod"
        }

        # -- How often to report metrics
        "period": "1 minute"

        # -- Prefix used for the metric name when sending to statsd
        "prefix": "snowplow.enrich"
      }
    }

    # -- Report unexpected runtime exceptions to Sentry
    "sentry": {
      "dsn": "https://public@sentry.example.com/1"

      # -- Map of key/value pairs to be included as tags
      "tags": {
        "myTag": "xyz"
      }
    }

    # -- Open a HTTP server that returns OK only if the app is healthy
    "healthProbe": {
      "port": 8000

      # -- Health probe becomes unhealthy if any received event is still not fully processed before
      # -- this cutoff time
      "unhealthyLatency": "2 minutes"
    }
  }

  # -- Period after which enrich assets should be checked for updates
  "assetsUpdatePeriod": "7 days"

  "validation" : {

    # When set to true, events with fields too long still get emitted as valid enriched events
    # WARNING: this feature flag will be removed in a future version
    "acceptInvalid": false

    # Override default maximum atomic fields (strings) length
    # Map-like structure with keys being field names and values being their max allowed length
    "atomicFieldsLimits": {
        "app_id": 5
        "mkt_clickid": 100000
        # ...and any other 'atomic' field with custom limit
    }

    # Maximum allowed depth for the JSON entities in the events. The default value is 40
    # Event will be sent to bad row stream if it contains JSON entity with a depth that exceeds this value
    "maxJsonDepth": 50

    # Default is true.
    # If it is set to true, Enrich will exit with error if JS enrichment
    # script is invalid.
    # If it is set to false, Enrich will continue to run if JS enrichment
    # script is invalid but every event will end up as bad row.
    "exitOnJsCompileError": true
  }

  # Optional. Configure telemetry
  "telemetry": {

    # Set to true to disable telemetry
    "disable": false

    # Interval for the heartbeat event
    "interval": 15 minutes

    # HTTP method used to send the heartbeat event
    "method": POST

    # URI of the collector receiving the heartbeat event
    "collectorUri": "https://collector-g.snowplowanalytics.com"

    # Identifier intended to tie events together across modules,
    # infrastructure and apps when used consistently
    "userProvidedId": my_pipeline

    # ID automatically generated upon running a modules deployment script
    # Intended to identify each independent module, and the infrastructure it controls
    "autoGeneratedId": hfy67e5ydhtrd

    # Unique identifier for the VM instance
    # Unique for each instance of the app running within a module
    "instanceId": 665bhft5u6udjf

    # Name of the terraform module that deployed the app
    "moduleName": enrich-kinesis-ce

    # Version of the terraform module that deployed the app
    "moduleVersion": 1.0.0
  }

  # Optional. Whether to export metadata using a webhook URL
  # Follows iglu-webhook protocol
  "metadata": {
    "endpoint": "https://my_pipeline.my_domain.com/iglu"
    "interval": 5 minutes
    "organizationId": "c5f3a09f-75f8-4309-bec5-fea560f78455"
    "pipelineId": "75a13583-5c99-40e3-81fc-541084dfc784"
    # Maximum body size for the payloads sent to the endpoint
    "maxBodySize": 150000
  }

  # -- Enrich events via an external identity service
  "identity": {
    "endpoint": "http://identity-api"
    "concurrency": 10
    "username": "snowplow"
    "password": "sn0wp10w"

    # -- Configures how HTTP requests are retried in case of failure
    "retries": {
      # -- Backoff delay for follow-up attempts
      "delay": "100 millis"
      # -- Max number of attempts, after which Enrich will crash and exit
      "attempts": 3
    }
  }

  # Configuration for Azure blob storage client configuration
  # used to download enrichment resources
  "blobClients": {
    "accounts": [
      # Example public account with no auth
      { "name": "storageAccount1"},

      # Example private account using default auth chain -> https://learn.microsoft.com/en-us/java/api/com.azure.identity.defaultazurecredential?view=azure-java-stable
      { "name": "storageAccount2", "auth": { "type": "default"} },

      # Example private account using SAS token auth
      { "name": "storageAccount3",  "auth": { "type": "sas", "value": "tokenValue"}}
    ]
  }
}
